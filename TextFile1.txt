var maxStorage = GigaStationsPlugin.ilsMaxStorage + __instance.factory.gameData.history.remoteStationExtraStorage;

            // FIXME: Handle warpers or antimatter rods being part of the recipe
            var recipeStorage = new StationStore[recipe.Items.Length + recipe.Results.Length];
            for (var i = 0; i < recipe.Items.Length; i++)
            {
                __instance.storageUIs[2 + i].OnItemPickerReturn(LDB.items.Select(recipe.Items[i]));
                recipeStorage[i].itemId = recipe.Items[i];
                recipeStorage[i].localLogic = ELogisticStorage.Demand;
                recipeStorage[i].remoteLogic = ELogisticStorage.Demand;
                recipeStorage[i].max = maxStorage;
            }
            for (var i = 0; i < recipe.Results.Length; i++)
            {
                recipeStorage[i + recipe.Items.Length].itemId = recipe.Results[i];
                recipeStorage[i + recipe.Items.Length].localLogic = ELogisticStorage.Supply;
                recipeStorage[i + recipe.Items.Length].remoteLogic = ELogisticStorage.Supply;
                recipeStorage[i + recipe.Items.Length].max = maxStorage;
            }

            // FIXME: Assert that stationComponent storage and slots are same length
            var recipeSlots = new SlotData[recipeStorage.Length];
            for (var i = 0; i < recipeStorage.Length; i++)
            {
                recipeSlots[i].storageIdx = i + stationComponent.slots.Length;
            }
            // FIXME: Lock?
            stationComponent.storage = stationComponent.storage.AddRangeToArray(recipeStorage);
            stationComponent.slots = stationComponent.slots.AddRangeToArray(recipeSlots);